:mod:`source.model.im_drive`
============================

.. py:module:: source.model.im_drive

.. autoapi-nested-parse::

   This module contains continuous-time models for an induction motor drive.

   Peak-valued complex space vectors are used. The space vector models are
   implemented in stator coordinates.

   ..
       !! processed by numpydoc !!



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   source.model.im_drive.InductionMotorDrive
   source.model.im_drive.InductionMotor
   source.model.im_drive.SaturationModel
   source.model.im_drive.SaturatedInductionMotor
   source.model.im_drive.Datalogger
   source.model.im_drive.DriveWithDiodeBridge
   source.model.im_drive.DataloggerExtended



.. py:class:: InductionMotorDrive(pars)

   Interconnect the subsystems of an induction motor drive.

   This interconnects the subsystems of an induction motor drive and provides
   the interface to the solver. More complicated systems could be simulated
   using a similar template.















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: get_initial_values(self)

      Get the initial values.

      :returns: **x0** -- Initial values of the state variables.
      :rtype: complex list, length 4















      ..
          !! processed by numpydoc !!


   .. method:: set_initial_values(self, t0, x0)

      Set the initial values.

      :param x0: Initial values of the state variables.
      :type x0: complex ndarray















      ..
          !! processed by numpydoc !!


   .. method:: f(self, t, x)

      Compute the complete state derivative list for the solver.

      :param t: Time.
      :type t: float
      :param x: State vector.
      :type x: complex ndarray

      :returns: State derivatives.
      :rtype: complex list















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: InductionMotor(pars)

   Induction motor.

   An induction motor is modeled using the Gamma-equivalent model [R743146ac54e0-1]_. The
   model is implemented in stator coordinates.

   :param pars: Contains the system model data.
   :type pars: ModelData object

   .. attribute:: R_s

      Stator resistance.

      :type: float

   .. attribute:: R_r

      Rotor resistance.

      :type: float

   .. attribute:: L_ell

      Leakage inductance.

      :type: float

   .. attribute:: L_s

      Stator inductance.

      :type: float

   .. attribute:: p

      Number of pole pairs.

      :type: int

   .. attribute:: psi_ss0

      Initial value of the stator flux linkage.

      :type: complex

   .. attribute:: psi_rs0

      Initial value of the rotor flux linkage.

      :type: complex

   .. rubric:: Notes

   The Gamma model is chosen here since it can be extended with the magnetic
   saturation model in a staightforward manner. If the magnetic saturation is
   omitted, the Gamma model is mathematically identical to the inverse-Gamma
   and T models. For model transformation, see [R743146ac54e0-1]_.

   .. rubric:: References

   .. [R743146ac54e0-1] Slemon, "Modelling of induction machines for electric drives," IEEE
      Trans. Ind. Appl., 1989, https://doi.org/10.1109/28.44251.















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: currents(self, psi_ss, psi_rs)

      Compute the stator and rotor currents.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_rs: Rotor flux linkage.
      :type psi_rs: complex

      :returns: * **i_ss** (*complex*) -- Stator current.
                * **i_rs** (*complex*) -- Rotor current.















      ..
          !! processed by numpydoc !!


   .. method:: torque(self, psi_ss, i_ss)

      Compute the electromagnetic torque.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param i_ss: Stator current.
      :type i_ss: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float















      ..
          !! processed by numpydoc !!


   .. method:: f(self, psi_ss, psi_rs, u_ss, w_M)

      Compute the state derivatives.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_rs: Rotor flux linkage.
      :type psi_rs: complex
      :param i_ss: Stator current.
      :type i_ss: complex
      :param i_rs: Rotor current.
      :type i_rs: complex
      :param u_ss: Stator voltage.
      :type u_ss: complex
      :param w_M: Rotor angular speed (in mechanical rad/s).
      :type w_M: float

      :returns: Time derivative of the state vector, [dpsi_ss, dpsi_rs]
      :rtype: complex list, length 2















      ..
          !! processed by numpydoc !!


   .. method:: meas_currents(self)

      Measure the phase currents at the end of the sampling period.

      :returns: **i_s_abc** -- Phase currents.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: SaturationModel(pars)

   Magnetic saturation model.

   Magnetic saturation is modeled using the power function::

       L_s(psi_s) = L_su/(1 + (beta*abs(psi_s)**S)

   .. attribute:: L_su

      Unsaturatad stator inductance.

   .. attribute:: beta

      Positive coefficient.

      :type: float

   .. attribute:: S

      Positive coefficient.

      :type: float

   .. rubric:: References

   Qu, Ranta, Hinkkanen, Luomi, "Loss-minimizing flux level control of
   induction motor drives," IEEE Trans. Ind. Appl., 2021,
   https://doi.org/10.1109/TIA.2012.2190818















   ..
       !! processed by numpydoc !!

   pars : ModelData object
       Contains the system model data.
















   ..
       !! processed by numpydoc !!

   .. method:: __call__(self, psi_s)

      :param psi_s: Stator flux linkage.
      :type psi_s: complex

      :returns: **L_s** -- Instantaneous saturated stator inductance.
      :rtype: float















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: SaturatedInductionMotor(pars)

   Bases: :class:`source.model.im_drive.InductionMotor`

   Induction motor with main-flux saturation.

   .. attribute:: R_s

      Stator resistance.

      :type: float

   .. attribute:: R_r

      Rotor resistance.

      :type: float

   .. attribute:: L_ell

      Leakage inductance.

      :type: float

   .. attribute:: L_s

      Instantaneous saturated stator inductance.

      :type: function `L_s(abs(psi_ss))`

   .. attribute:: p

      Number of pole pairs.

      :type: int















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: currents(self, psi_ss, psi_rs)

      Compute the stator and rotor currents.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_rs: Rotor flux linkage.
      :type psi_rs: complex

      :returns: * **i_ss** (*complex*) -- Stator current.
                * **i_rs** (*complex*) -- Rotor current.















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: Datalogger

   Datalogger for an induction motor drive.
















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: save(self, sol)

      Save the solution.

      :param sol: Solution from the solver.
      :type sol: bunch object















      ..
          !! processed by numpydoc !!


   .. method:: post_process(self, mdl)

      Transform the lists to the ndarray format and post-process them.

      :param mdl: Contains the methods used for post-processing.
      :type mdl: Model object















      ..
          !! processed by numpydoc !!



.. py:class:: DriveWithDiodeBridge(pars)

   Bases: :class:`source.model.im_drive.InductionMotorDrive`

   Induction motor drive equipped with a diode bridge.

   This models an induction motor drive, equipped with a three-phase diode
   bridge fed from stiff supply voltages. The DC bus has an inductor and
   a capacitor.















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: get_initial_values(self)

      Get the initial values.

      :returns: **x0** -- Initial values of the state variables.
      :rtype: complex list, length 4















      ..
          !! processed by numpydoc !!


   .. method:: set_initial_values(self, t0, x0)

      Set the initial values.

      :param x0: Initial values of the state variables.
      :type x0: complex ndarray















      ..
          !! processed by numpydoc !!


   .. method:: f(self, t, x)

      Compute the complete state derivative list for the solver.

      :param t: Time.
      :type t: float
      :param x: State vector.
      :type x: complex ndarray

      :returns: State derivatives.
      :rtype: complex list















      ..
          !! processed by numpydoc !!



.. py:class:: DataloggerExtended

   Bases: :class:`source.model.im_drive.Datalogger`

   Datalogger for an induction motor drive with a diode bridge.
















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: save(self, sol)

      Save the solution.

      :param sol: Solution from the solver.
      :type sol: bunch object















      ..
          !! processed by numpydoc !!


   .. method:: post_process(self, mdl)

      Transform the lists to the ndarray format and post-process them.

      :param mdl: Contains the methods used for post-processing.
      :type mdl: Model object















      ..
          !! processed by numpydoc !!



