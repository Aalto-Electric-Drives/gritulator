:mod:`source.model.sm_drive`
============================

.. py:module:: source.model.sm_drive

.. autoapi-nested-parse::

   This module contains continuous-time models for synchronous motor drives.

   The motor model can be parametrized to represent a permanent-magnet synchronous
   motor and synchronous reluctance motor. Peak-valued complex space vectors are
   used.

   ..
       !! processed by numpydoc !!



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   source.model.sm_drive.SynchronousMotorDrive
   source.model.sm_drive.SynchronousMotor
   source.model.sm_drive.Datalogger



.. py:class:: SynchronousMotorDrive(pars)

   Model of a synchronous motor drive.

   This interconnects the subsystems of a synchronous motor drive and provides
   the interface to the solver. More complicated systems could be simulated
   using a similar template.















   ..
       !! processed by numpydoc !!

   :param pars: Contains the system model data.
   :type pars: ModelData object
















   ..
       !! processed by numpydoc !!

   .. method:: get_initial_values(self)

      Get the initial values.

      :returns: **x0** -- Initial values of the state variables.
      :rtype: complex list, length 2















      ..
          !! processed by numpydoc !!


   .. method:: set_initial_values(self, t0, x0)

      Set the initial values.

      :param x0: Initial values of the state variables.
      :type x0: complex ndarray















      ..
          !! processed by numpydoc !!


   .. method:: f(self, t, x)

      Compute the complete state derivative list for the solver.

      :param t: Time.
      :type t: float
      :param x: State vector.
      :type x: complex ndarray

      :returns: State derivatives.
      :rtype: complex list















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: SynchronousMotor(mech, pars)

   Synchronous motor.

   This models a synchronous motor. The model is implemented in rotor
   coordinates.

   .. attribute:: R_s

      Stator resistance.

      :type: float

   .. attribute:: L_d

      d-axis inductance.

      :type: float

   .. attribute:: L_q

      q-axis inductance.

      :type: float

   .. attribute:: psi_f

      PM-flux linkage.

      :type: float

   .. attribute:: p

      Number of pole pairs.

      :type: int

   .. attribute:: psi_s0

      Initial value of the stator flux linkage.

      :type: complex















   ..
       !! processed by numpydoc !!

   :param mech: Mechanical subsystem model.
   :type mech: Mechanics object
   :param pars: Contains the motor data.
   :type pars: ModelData object
















   ..
       !! processed by numpydoc !!

   .. method:: current(self, psi_s)

      Compute the stator current.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex

      :returns: **i_s** -- Stator current.
      :rtype: complex















      ..
          !! processed by numpydoc !!


   .. method:: torque(self, psi_s, i_s)

      Compute the electromagnetic torque.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex
      :param i_s: Stator current.
      :type i_s: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float















      ..
          !! processed by numpydoc !!


   .. method:: f(self, psi_s, i_s, u_s, w_M)

      Compute the state derivative.

      :param psi_s: Stator flux linkage.
      :type psi_s: complex
      :param u_s: Stator voltage.
      :type u_s: complex
      :param w_M: Rotor angular speed (in mechanical rad/s).
      :type w_M: float

      :returns: **dpsi_s** -- Time derivative of the stator flux linkage.
      :rtype: complex















      ..
          !! processed by numpydoc !!


   .. method:: meas_currents(self)

      Measure the phase currents at the end of the sampling period.

      :returns: **i_s_abc** -- Phase currents.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!


   .. method:: __str__(self)

      Return str(self).
















      ..
          !! processed by numpydoc !!



.. py:class:: Datalogger

   Datalogger for a synchronous motor drive.
















   ..
       !! processed by numpydoc !!

   Initialize self.  See help(type(self)) for accurate signature.
















   ..
       !! processed by numpydoc !!

   .. method:: save(self, sol)

      Save the solution.

      :param sol: Solution from the solver.
      :type sol: bunch object















      ..
          !! processed by numpydoc !!


   .. method:: post_process(self, mdl)

      Transform the lists to the ndarray format and post-process them.

      :param mdl: Drive object that includes the data.
      :type mdl: object















      ..
          !! processed by numpydoc !!



