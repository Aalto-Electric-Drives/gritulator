:orphan:

:py:mod:`motulator.model._grid_volt_source`
===========================================

.. py:module:: motulator.model._grid_volt_source

.. autoapi-nested-parse::

   This module contains continuous-time models for 3-phase voltage source
   of a grid.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   motulator.model._grid_volt_source.StiffSource
   motulator.model._grid_volt_source.FlexSource




.. py:class:: StiffSource(w_N=2 * np.pi * 50, e_g_abs=lambda t: 400 * np.sqrt(2 / 3))


   
   Grid subsystem.

   This model is a constant frequency 3-phase voltage source of the AC grid.

   :param w_N: grid constant frequency
   :type w_N: float
   :param e_g_abs: 3-phase grid voltage magnitude (phase-to-ground peak value)
   :type e_g_abs: function















   ..
       !! processed by numpydoc !!
   .. py:method:: voltages(t)

      
      Compute the grid voltage in stationary frame:

      :param t: Time.
      :type t: float

      :returns: **e_gs** -- grid complex voltage.
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_voltages(t)

      
      Measure the phase voltages at the end of the sampling period.

      :param t: Time.
      :type t: float

      :returns: **e_g_abc** -- Phase voltages.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!


.. py:class:: FlexSource(T_D=10, T_N=3, H_g=3, D_g=0, r_d=0.05, T_gov=0.5, w_N=2 * np.pi * 50, S_grid=500000000.0, e_g_abs=lambda t: 400 * np.sqrt(2 / 3), p_m_ref=lambda t: 0, p_e=lambda t: 0)


   
   Grid subsystem.
   This models the 3-phase voltage source of the AC grid while taking into
   account the electromechanical dynamics of a typical grid generated by the
   synchronous generators.

   More information about the model can be found in [1].

   [1] : ENTSO-E, Documentation on Controller Tests in Test Grid
   Configurations, Technical Report, 26.11.2013.
   :param T_D: turbine delay time constant (in seconds).
   :type T_D: float
   :param T_N: turbine derivative time constant (in seconds).
   :type T_N: float
   :param H_g: grid inertia constant (in seconds).
   :type H_g: float
   :param r_d: primary frequency droop control gain (in p.u.).
   :type r_d: float
   :param T_gov: governor time constant (in seconds).
   :type T_gov: float
   :param w_N: grid constant frequency (in rad/s).
   :type w_N: float
   :param S_grid: grid rated power (in VA).
   :type S_grid: float
   :param e_g_abs: 3-phase grid voltage magnitude (phase-to-ground peak value).
   :type e_g_abs: function
   :param p_m_ref: mechanical power output reference (in W).
   :type p_m_ref: function
   :param p_e: electrical power disturbance (in W).
   :type p_e: function















   ..
       !! processed by numpydoc !!
   .. py:method:: f(t, err_w_g, p_gov, x_turb)

      
      Compute the state derivative.
      :param t: Time.
      :type t: float
      :param err_w_g: grid angular speed deviation (in mechanical rad/s).
      :type err_w_g: float
      :param p_gov: governor output power (in W).
      :type p_gov: float
      :param x_turb: turbine state variable (in W).
      :type x_turb: float
      :param p_e: electrical power disturbance (in W).
      :type p_e: float

      :returns: Time derivative of the state vector.
      :rtype: list, length 2















      ..
          !! processed by numpydoc !!

   .. py:method:: voltages(t, theta_g)

      
      Compute the grid voltage in stationary frame:

      :param t: Time.
      :type t: float
      :param theta_g: grid electrical angle (in rad).
      :type theta_g: float

      :returns: **e_gs** -- grid complex voltage (in V).
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_voltages(t)

      
      Measure the phase voltages at the end of the sampling period.

      :returns: **e_g_abc** -- Phase voltages.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_freq()

      
      Measure the grid frequency.
      This returns the grid frequency at the end of the sampling period.
      :returns: **w_g0** -- Grid angular speed (in rad/s).
      :rtype: float
















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_angle()

      
      Measure the grid angle.
      This returns the grid angle at the end of the sampling period.
      :returns: **theta_g0** -- grid electrical angle (in rad).
      :rtype: float
















      ..
          !! processed by numpydoc !!


