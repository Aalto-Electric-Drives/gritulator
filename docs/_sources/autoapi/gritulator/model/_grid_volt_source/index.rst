:orphan:

:py:mod:`gritulator.model._grid_volt_source`
============================================

.. py:module:: gritulator.model._grid_volt_source

.. autoapi-nested-parse::

   3-phase AC voltage source models.

   Two voltage sources with variable voltage magnitude, to simulate voltage dips
   and symmetrical short circuits are modeled. A stiff model with a constant
   frequency and a dynamic model with the electromechanical dynamics of a
   synchronous generator are considered. In this module, all space vectors are in
   stationary coordinates.


   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   gritulator.model._grid_volt_source.StiffSource
   gritulator.model._grid_volt_source.FlexSource




.. py:class:: StiffSource(w_N=2 * np.pi * 50, e_g_abs=lambda t: 400 * np.sqrt(2 / 3))


   
   Grid subsystem.

   This model is a constant frequency 3-phase voltage source of the AC grid.

   :param w_N: grid constant frequency (rad/s).
   :type w_N: float
   :param e_g_abs: 3-phase grid voltage magnitude, phase-to-ground peak value (V).
   :type e_g_abs: function















   ..
       !! processed by numpydoc !!
   .. py:method:: voltages(t)

      
      Compute the grid voltage in stationary frame.

      :param t: Time (s).
      :type t: float

      :returns: **e_gs** -- grid complex voltage (V).
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_voltages(t)

      
      Measure the phase voltages at the end of the sampling period.

      :param t: Time (s).
      :type t: float

      :returns: **e_g_abc** -- Phase voltages (V).
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!


.. py:class:: FlexSource(T_D=10, T_N=3, H_g=3, D_g=0, r_d=0.05, T_gov=0.5, w_N=2 * np.pi * 50, S_grid=500000000.0, e_g_abs=lambda t: 400 * np.sqrt(2 / 3), p_m_ref=lambda t: 0, p_e=lambda t: 0)


   
   Grid subsystem.

   This models the 3-phase voltage source of the AC grid while taking into
   account the electromechanical dynamics of a typical grid generated by the
   synchronous generators.

   More information about the model can be found in [#ENT2013].

   [#ENT2013] : ENTSO-E, Documentation on Controller Tests in Test Grid
   Configurations, Technical Report, 26.11.2013.

   :param T_D: turbine delay time constant (s).
   :type T_D: float
   :param T_N: turbine derivative time constant (s).
   :type T_N: float
   :param H_g: grid inertia constant (s).
   :type H_g: float
   :param r_d: primary frequency droop control gain (p.u.).
   :type r_d: float
   :param T_gov: governor time constant (s).
   :type T_gov: float
   :param w_N: grid constant frequency (rad/s).
   :type w_N: float
   :param S_grid: grid rated power (VA).
   :type S_grid: float
   :param e_g_abs: 3-phase grid voltage magnitude, phase-to-ground peak value (V).
   :type e_g_abs: function
   :param p_m_ref: mechanical power output reference (W).
   :type p_m_ref: function
   :param p_e: electrical power disturbance (W).
   :type p_e: function















   ..
       !! processed by numpydoc !!
   .. py:method:: f(t, err_w_g, p_gov, x_turb)

      
      Compute the state derivatives.

      :param t: Time (s).
      :type t: float
      :param err_w_g: grid angular speed deviation (mechanical rad/s).
      :type err_w_g: float
      :param p_gov: governor output power (W).
      :type p_gov: float
      :param x_turb: turbine state variable (W).
      :type x_turb: float
      :param p_e: electrical power disturbance (W).
      :type p_e: float

      :returns: Time derivatives of the state vector.
      :rtype: list, length 4















      ..
          !! processed by numpydoc !!

   .. py:method:: voltages(t, theta_g)

      
      Compute the grid voltage in stationary frame:

      :param t: Time.
      :type t: float
      :param theta_g: grid electrical angle (rad).
      :type theta_g: float

      :returns: **e_gs** -- grid complex voltage (V).
      :rtype: complex















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_voltages(t)

      
      Measure the phase voltages at the end of the sampling period.

      :returns: **e_g_abc** -- Phase voltages (V).
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_freq()

      
      Measure the grid frequency.

      This returns the grid frequency at the end of the sampling period.

      :returns: **w_g0** -- Grid angular speed (rad/s).
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_angle()

      
      Measure the grid angle.

      This returns the grid angle at the end of the sampling period.

      :returns: **theta_g0** -- grid electrical angle (rad).
      :rtype: float















      ..
          !! processed by numpydoc !!


